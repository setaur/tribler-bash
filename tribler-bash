#!/bin/bash
# Simple command line client for Tribler
# The MIT License (MIT)
# Copyright (c) 2023 setaur

# Tribler API Docs:
# https://tribler.readthedocs.io/en/latest/restapi/introduction.html

tribler_dir="$HOME/.Tribler"

show_headline=1
DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
set -o pipefail

for app in jq curl numfmt; do
    command -v "$app" >/dev/null || { echo "There is no $app installed!" >&2; exit 1; }
done; unset app

DEBUG_COLOR_START="$(tput setaf 1 2>/dev/null)"
DEBUG_COLOR_END="$(tput sgr 0 2>/dev/null)"
[[ "$DISABLE_COLORED_DEBUG" ]] && unset DEBUG_COLOR_START DEBUG_COLOR_END
debug() {
    #if variable DEBUG is set, then prints to stderr
    #can use standard echo parameters
    #extra parameters: -d|-t - adds date; -f - adds parent function name
    [[ "$DEBUG" ]] || return 0
    
    while [ $# -gt 0 ]; do
        case "$1" in
            -d|-t) local debug_date="[$(date +'%F %X' )] " ;;
            -f) local debug_function="{${FUNCNAME[1]}}: " ;;
            -*) [[ "${#debug_args[@]}" -eq 0 ]] && local debug_args=( )
                debug_args+=("$1") ;;
            *)  break;;
        esac
        shift
    done

    #how deep function is nested:
    local s a sep
    s="$((${#FUNCNAME[@]}-2))"
    for ((a=1;a<=s;a++)); do
	sep="${sep}[ ]"
    done

    echo "${debug_args[@]}" "${sep}${DEBUG_COLOR_START}${debug_date}${debug_function}$*${DEBUG_COLOR_END}" >&2
    #echo "${debug_args[@]}" "${DEBUG_COLOR_START}${debug_date}${debug_function}$*${DEBUG_COLOR_END}" >&2
}

err() {
    [[ "${FUNCNAME[1]}" ]] && echo -n "{${FUNCNAME[1]}}: " >&2
    echo "$@" >&2
}

estimate_time() {
    #converts seconds to human readable estimtion, i.e. 2w
    local t
    t="$1"

    [[ "$t" =~ ^[0-9]*\.[0-9]+$ ]] && t="${t%.*}" #remove all digits after dot .
	
    if ! [[ "$t" =~ ^[0-9]+$ ]]; then
	echo "-"
	return 1
    fi
    
    [[ "$t" -eq 0 ]] && echo "-" && return
    
    [[ "$t" -lt 120 ]] && echo "${t}s" && return
    t=$((t/60))
    
    [[ "$t" -lt 120 ]] && echo "${t}m" && return
    t=$((t/60))
    
    [[ "$t" -lt 24 ]] && echo "${t}h" && return
    t=$((t/24))
    
    [[ "$t" -lt 7 ]] && echo "${t}d" && return
    t=$((t/7))
    
    [[ "$t" -lt 48 ]] && echo "${t}w" && return
    t=$((t/48))

    [[ "$t" -lt 100 ]] && echo "${t}y" && return
    echo forever
}

size_human_readable() {
    # $2 - optional decimal digits
    # $3 - optional round
    local digits round
    [[ "$2" ]] && digits="$2" || digits=0
    [[ "$3" ]] && round="$3"  || round='nearest'

    if ! [[ "$1" =~ ^[0-9]+$ ]]; then
	echo "'$1'"
	return
    fi
    
    numfmt --to=iec-i \
	   --suffix=B \
	   --format=" %.${digits}f" \
	   --round="${round}" "${1}" \
#	   --padding=-1 
}

jq_() { jq -e -r "$@"; }

curl_tribler() {
    # $1 - part of addres i.e http://localhost:$apiport/$1
    # $2 - request type, i.e. GET PUT DELETE (curl -X GET)
    # $3 - optional: json payload (curl -d "$3" )
    local i
    declare -a curl_cmd output ecode http_code
    
    curl_cmd+=( curl -m 60 -s -X "$2" -H "X-Api-Key: $apikey" -w "\t%{http_code}" )
    curl_cmd+=( -H  "accept: application/json" )
    [[ "$2" == PUT ]] && curl_cmd+=( -H  "Content-Type: application/json" )
    [[ "$3" ]] && curl_cmd+=( -d "$3" )
    curl_cmd+=( "http://localhost:${apiport}/${1}" )
    
    #debug -f "${curl_cmd[*]@Q}"
    debug -f $'\n'$'\t'"$( printf "'%s' " "${curl_cmd[@]}" )"$'\n'

    for ((i=0;i<3;i++)); do
	output="$( "${curl_cmd[@]}" )"
	ecode=$?
	[[ "$ecode" == 0 ]] && break
	sleep 0.5
    done
    
    if [[ "$ecode" != 0 ]]; then
	err "CURL_ERROR_CODE=${ecode}"
	err "Cannot connect to Tribler Core. Is Tribler running?"
	exit "$ecode"
    elif ! [[ "$output" ]]; then
	err "Error: Empty output!"
	return 1
    fi
    
    http_code="$(echo "$output" | cut -f 2 )"
    output="$(echo "$output" | cut -f 1 )"

    if [[ "$http_code" != 200 ]]; then
	err "Error! HTTP RESPONSE: ${http_code}"
	err "$output"
	return 2
    fi

    echo -n "$output"
}

bash_ini_parser__github='https://github.com/rudimeier/bash_ini_parser.git'
bash_ini_parser_path=''
get_api_data() {
    #get required data from tribler config file
    local version conf_file yn var
    debug -f "Start"
    
    version="${tribler_dir}/version_history.json"
    [[ -f "$version" ]] || { ls "$version"; exit; }
    version="$(cat "$version" | jq -e -r '.last_version' | sed 's#.0$##g' )"
    [[ "$version" ]] || { err "Cannot determine Tribler version!"; exit 1; }
    debug -f "Tribler version: '$version'"
    
    debug -f "Searching for config file..."
    conf_file="$(find "$tribler_dir/$version" -maxdepth 1 -type f -name triblerd.conf -print -quit )"
    ls "$conf_file" >/dev/null || exit 44
    debug -f "Tribler config file found: '$conf_file'"

    debug -f "Processing config file"
    [[ "$bash_ini_parser__read_ini__path" ]] ||\
	bash_ini_parser_path="${DIR}/bash_ini_parser"
    if ! [[ -d "$bash_ini_parser_path" ]]; then 
	err "To parse tribler config file, bash_ini_parser is required."

	read -p "Download bash_ini_parser from ${bash_ini_parser__github} into $DIR ? (y/n) " yn
	case $yn in
            [Yy]* ) true ;;
            * )
		err -e "Cannot parse tribler config file!\nRead CONNECTION section in help:\n"
		help; exit 1
		;;
	esac

	debug -f "Downloading bash_ini_parser..."
	(
	    cd "$DIR" || exit 1
	    git clone "$bash_ini_parser__github" || exit
	) || exit
	debug -f "downloaded."
    fi
	
    source "${bash_ini_parser_path}/read_ini.sh" || { err "Error running read_ini!"; exit 2; }
    debug -f "read_ini.sh from bash_ini_parser loaded"
    debug -f "reading tribler config file"
    read_ini "$conf_file"
    debug -f "vars from config file: $INI__ALL_VARS"

    apikey="$INI__api__key"
    apiport="$INI__api__http_port"

    for var in apikey apiport; do
	[[ "${!var}" ]] || { err "$var empty!"; exit 1; }
	debug -f "$var=${!var}"
    done	
}

populate_basics() {
    #if missing, populates basic vars from tribler config file or from tribler settings
    local var output
    for var in apikey apiport; do
	if ! [[ "${!var}" ]]; then
	    debug -f "Variable '\$$var' missing, running get_api_data"
	    get_api_data || exit
	    break
	fi
    done

    if ! [[ "$default_destination_path" ]]; then
	[[ "$output" ]] || output="$(curl_tribler settings GET )" || exit
	default_destination_path="$( echo "$output" | jq_ .settings.download_defaults.saveas )"
	debug -f "default_destination_path=$default_destination_path"
	
	[[ "$default_destination_path" ]] || { err "Cannot set default_destination_path!"; exit 1; }
    fi
    if ! [[ "$default_hops" ]]; then
	[[ "$output" ]] || output="$(curl_tribler settings GET )" || exit
	default_hops="$( echo "$output" | jq_ .settings.download_defaults.number_hops )"
	debug -f "default_hops=$default_hops"
	
	[[ "$default_hops" ]] || { err "Cannot set default_hops!"; exit 1; }
    fi
        
}

populate_downloads_data() {
    #populate global vars and arrays with current data about Tribler downloads
    
    debug ''; debug -f "start"
    populate_basics

    if [[ "$last_checktime" && ( "$(( $SECONDS-$last_checktime ))" -le 2 ) ]]; then
	debug -f "Last check not long time ago, skipping."
	return 0
    fi
    
    debug -f "getting download data"
    # skip this section if last check not long ago
	
    download_data="$(curl_tribler downloads GET)" || exit
    last_checktime="$SECONDS"

    debug -f "processing download data"
    debug -f "populating array Hashes_all"
    Hashes_all=( $(echo "$download_data" | jq -r -c ".downloads[].infohash") )
    debug -f "Hashes_all: ${Hashes_all[*]}"

    if ! [[ "${Hashes_all[*]}" ]]; then
        debug -f "No torrents active"
        return 0
    fi

    debug -f "Getting key names" #i.e. 'infohash', 'name', 'size'...
    mapfile -t Keys_download < <(echo "$download_data" | jq -r -c ".downloads[0] | keys | .[]")
    debug -f "Keys_download=${Keys_download[*]}"
    
    local hash associative_table_name key value

    debug -f -e "Populating associative arrays\n"
    for hash in "${Hashes_all[@]}"; do
	
	debug -f "[ HASH: ${hash} ]"
        [[ "$hash" && "$hash" =~ ^[a-zA-Z_0-9]+$ ]] ||\
            { err "empty or invalid chars in hash: '$hash'"; return 2; }
	
        associative_table_name="hash_${hash}"
        declare -g -A "${associative_table_name}"
	debug -f -e "\t declare -g -A \"${associative_table_name}\""

        for key in "${Keys_download[@]}"; do
	    value="$(echo "$download_data" | jq -r -c ".downloads[] | select(.infohash | contains(\"${hash}\")) | .$key" )"
	    debug -f -e "\t declare \"${associative_table_name}\"[\"$key\"]=\"$value\""
            declare -g "${associative_table_name}"["$key"]="$value"
        done
	debug ''
    done

    debug -f "Populating indexes in order of creation time"
    readarray -t Hashes_sorted_by_time_added < <(
	for hash in "${Hashes_all[@]}"; do
	    echo -e "${hash}\t$(get_download_data "$hash" time_added)"
	done | sort -t $'\t' -n -k2 | cut -f1
    )

    debug -f "sorted hashes: ${Hashes_sorted_by_time_added[*]}"

    declare -g -A Index
    local i
    i=1
    for hash in "${Hashes_sorted_by_time_added[@]}"; do
	Index[$i]="$hash"
	debug -f "Index[$i]=$hash"
	i=$((i+1))
    done

	
#    [[ "$SET_X" ]] && { set +x; unset SET_X; }
    debug -f -e "end\n"
}

get_download_data() {
    # parameters:
    # $1 - infohash, $2 - key (from json, i.e.: name, eta, hops, speed_up etc.
    # Show selected data from associative array 'hash_$INFOHASH[$key]'
    local hash key value associative_table_name associative_query
#    debug ''; debug -f "start"
    
    hash="$1"; key="$2"
    [[ " ${Hashes_all[*]} " == *" ${hash} "* ]] || { err "invalid hash '$hash'"; return 1; }
    [[ " ${Keys_download[*]} " == *" ${key} "* ]] ||\
        { err -e "invalid key '$key'. Available keys:\n${Keys_download[*]}"; return 1; }

#    [[ "$DEBUG" ]] && set -x
    associative_table_name="hash_${hash}"
    associative_query="${associative_table_name}[${key}]"
    value="${!associative_query}"

    debug -f "$hash $key = '$value'"
    echo "$value"
#    [[ "$DEBUG" ]] && set +x
#    debug -f -e 'end\n'
}

print_values() {
    #print values of keys from json data on torrents from array $Hashes
    #if $1 = '--list-keys'; then only lists all keys
    #args: KEY1 [KEY2 [...] ]
    debug ''; debug -f "start"
    populate_basics
    [[ "${Keys_download[*]}" ]] || populate_downloads_data

    local key line hash value
    
    if [[ "$1" == '--list-keys' ]]; then
	echo "${Keys_download[*]}"
	return
    elif ! [[ "${Hashes[*]}" ]]; then
	debug -f "empty Hashes array!"
	err "No torrents selected!"
	exit 1
    fi

    {
	#Headline
	if [[ "$show_headline" ]]; then
	    for key in "$@"; do
		if ! [[ " ${Keys_download[*]} " == *" ${key} "* ]]; then
		    err -e "invalid key '$key'. Available keys:\n${Keys_download[*]}"
		    exit 1
		elif ! [[ "$line" ]]; then
		    line="$key"
		else
		    line="${line}\t${key}"
		fi
	    done
	    echo -e "${line}" | tr '[:lower:]' '[:upper:]'
	fi

	#values
	for hash in "${Hashes[@]}"; do
	    unset line    
	    for key in "$@"; do
		value="$(get_download_data "$hash" "$key")" || return 1
	    	if ! [[ "$line" ]]; then
		    line="$value"
		else
		    line="${line}\t${value}"
		fi
	    done
	    echo -e "$line"
	done
    } | column -t -s $'\t'
}

list() {
    # shows chosen data about all Tribler downloads in human readable format
    # if $1=full then shows more columns
    debug ''; debug -f "start"
    populate_downloads_data

    local LONG line hash name perc size size_downloaded speed_down speed_up status ratio eta hops index

    command -v numfmt >/dev/null || { err "not installed: numfmt !"; exit 1; }

    [[ "$1" == full ]] && LONG=1

    {
	if [[ "$show_headline" ]]; then
	    line='#'
	    
	    [[ "$LONG" ]] && line="${line}\tINFOHASH"	    
	    line="${line}\t  NAME"
	    line="${line}\tSEEDS\tPEERS"
	    line="${line}\tPROGRESS"
	    line="${line}\tSTATUS"
	    line="${line}\t  SIZE\t \t "
	    line="${line}\t  SPEED\t \t "
	    line="${line}\tETA"
	    [[ "$LONG" ]] && line="${line}\tRATIO"
	    [[ "$LONG" ]] && line="${line}\tHOPS"

	    echo -e "$line"
	fi
    
	#for hash in "${Hashes_all[@]}"; do
	for ((index=1;index<="${#Index[@]}";index++)); do
	    hash="${Index[$index]}"
	    line="${index}"
	    
	    [[ "$LONG" ]] && line="${line}\t${hash}"
	    
            name="'$(get_download_data "$hash" name)'"
	    line="${line}\t${name}"

	    seeds="$(get_download_data "$hash" num_connected_seeds) ($(get_download_data "$hash" num_seeds))"
	    peers="$(get_download_data "$hash" num_connected_peers) ($(get_download_data "$hash" num_peers))"
	    line="${line}\t${seeds}\t${peers}"

	    perc="$(echo "scale=2; $(get_download_data "$hash" progress)*100/1" | bc -l )" #%
	    line="${line}\t${perc}%"
	    
	    status="$(get_download_data "$hash" status | sed 's/^DLSTATUS_//' | tr '[:upper:]' '[:lower:]' )"
	    line="${line}\t${status}"

	    size_downloaded="$(echo "$(get_download_data "$hash" progress)*$(get_download_data "$hash" size)/1" | bc)"
            size_downloaded="$(size_human_readable "$size_downloaded" 2 )"
	    size="$(size_human_readable "$(get_download_data "$hash" size)" 2 )"
	    line="${line}\t[ ${size_downloaded}\t/\t${size} ]"

	    speed_down="$(size_human_readable "$(get_download_data "$hash" speed_down)" )/s"
            speed_up="$(size_human_readable "$(get_download_data "$hash" speed_up)" )/s"
	    line="${line}\t[ ↓${speed_down}\t/\t↑${speed_up} ]"
	    
            eta="$(estimate_time "$(get_download_data "$hash" eta)" )"
	    line="${line}\t${eta}"
	            
            [[ "$LONG" ]] && {
		ratio="$(echo "$(get_download_data "$hash" ratio)*100/1" | bc )" #%
		line="${line}\t${ratio}"
	    }
	    
            [[ "$LONG" ]] && {
		hops="$(get_download_data "$hash" hops)" #%
		line="${line}\t${hops}"
	    }

	    echo -e "$line"
	done
    } | column -t -s $'\t'

    debug -e -f 'end\n'
}    

select_torrent() {
    # select specific torrent by index or hash, args: - hash|index
    debug ''; debug -f "start"
    populate_downloads_data

    local arg hash

    if [[ $# == 1 && "$1" == 'all' ]]; then
	debug -f "special keyword 'all', selecting all torrents"
	Hashes=( "${Hashes_all[@]}" )
	return 0
    fi
    
    for arg in "$@"; do
	if [[ "$arg" =~ ^[0-9]{1,6}$ ]]; then
	    debug -f "Treat '$arg' as index"
	    [[ "$arg" -ge 1 && "$arg" -le "${#Index[@]}" ]] || { err "Index:$arg out of range!"; exit 1; }
	    hash="${Index[$arg]}"
	else
	    debug -f "Treat '$arg' as hash"
	    hash="$arg"
	    if ! [[ " ${Hashes_all[*]} " == *" ${hash} "* ]]; then
		err "Hash '$hash' not in Tribler hashes!"
		return 1
	    fi
	fi
	Hashes+=( "$hash" )
    done

    debug -e -f "end\n"
}

change_download_state() {
    # changest state of all downloads from array $Hash
    # parameter: $1: resume/stop/recheck
    debug ''; debug -f "start"

    populate_downloads_data
    
    local hash action payload
    action="$1"

    [[ "${Hashes[*]}" ]] || { err "Hash not selected!"; return 1; }
    [[ "$action" ]] || { err "action needed!"; return 1; }

    while [[ "$#" -gt 0 ]]; do
	case "$action" in
	    hops)
		hops="$2"
		[[ "$hops" =~ ^[0-3]$ ]] || { err "Invalid hops='$hops'. Must be integer 0-3"; return 1; }
		[[ "$hops" -eq 0 ]] && echo -e '\nHOPS=0 - NOT SECURE!\n'
		shift
		;;
	    start|resume) state=resume ;;
	    stop|pause) state=stop ;;
	    recheck) state=recheck ;;
	    *)
		err -e "Invalid action: '$state'\nCan be: start|resume,stop|pause,recheck\n or hops HOPS_NUMBER"
		return 1
		;;
	esac
	shift
    done

    [[ "$state" ]] && payload=" \"state\": \"$state\" "
    if [[ "$hops" ]]; then
	[[ "$payload" ]] && payload="${payload}, "
	payload="\"anon_hops\": $hops"
    fi
    payload="{ ${payload} }"

    local rcode curl_tribler_rcode output
    rcode=0
    for hash in "${Hashes[@]}"; do
	debug -f "processing $hash"
	output="$( curl_tribler "downloads/$hash" PATCH "$payload" )"
	curl_tribler_rcode=$?
	if [[ "$curl_tribler_rcode" != 0 ]]; then
	    rcode="$curl_tribler_rcode"
	    debug -f "failed: $hash"
	else
	    if [[ "$(echo "$output" | jq_ '.modified')" == true ]]; then
		debug -f "success: $hash"
		echo "$hash"
	    fi
	fi
    done

    debug -f -e 'end\n'
    return "$rcode"
}

add_torrent() {
    debug ''; debug -f "start"
    populate_basics
    local rcode curl_tribler_rcode output url infohash

    rcode=0
    for url in "$@"; do
	debug -f "processing $url"
	output="$( curl_tribler downloads PUT \
"{  \"destination\": \"${default_destination_path}\",  \
\"anon_hops\": ${default_hops},  \
\"safe_seeding\": true,  \
\"uri\": \"${url}\"}" )"
	curl_tribler_rcode=$?
	if [[ "$curl_tribler_rcode" != 0 ]]; then
	    rcode="$curl_tribler_rcode"
	    debug -f "failed: $url"
	else
	    if [[ "$(echo "$output" | jq_ '.started')" == true ]]; then
		infohash="$(echo "$output" | jq_ '.infohash')"
		debug -f "success: started $infohash"
		echo "$infohash"

		#if [[ "$dont_start_new_torrent" ]]; then
		#    debug -f "stopping new torrent"
		#    Hashes=( "$infohash" )
		#    change_download_state stop || err "Failed stopping $infohash !"
		#fi
		#NOT WORKING - if new torrent started but not changed state into download fast, it will not work :(
	    else
		debug -f "Failed: $url"
		rcode=1
	    fi
	fi
    done

    debug -f -e 'end\n'
    return "$rcode"
}

remove_torrent() {
    # removes all torrents from $Hashes array
    # parameters: if $1=remove_data; then removes also data on disk
    debug ''; debug -f "start"
    populate_downloads_data

    local remove_data
    
    [[ "${Hashes[*]}" ]] || { err "Hash not selected!"; return 1; }

    if [[ "$1" == remove_data ]]; then
	remove_data=true
    else
	remove_data=false
    fi
    debug -f "remove_data=$remove_data"

    local rcode curl_tribler_rcode output
    rcode=0
    for hash in "${Hashes[@]}"; do
	debug -f "processing $hash"

	output="$( curl_tribler "downloads/$hash" DELETE "{  \"remove_data\": $remove_data}" )"
	curl_tribler_rcode=$?
	if [[ "$curl_tribler_rcode" != 0 ]]; then
	    rcode="$curl_tribler_rcode"
	    debug -f "failed: $hash"
	else
	    if [[ "$(echo "$output" | jq_ '.removed')" == true ]]; then
		debug -f "success: $hash"
		echo "$hash"
	    fi
	fi
    done

    debug -f -e 'end\n'
    return "$rcode"
}

help() {
    echo -e \
"tribler-bash - command line interface for Tribler torrent client
\tProvides all basic functionalites needed for command line usage
Usage:
\t tribler-bash [PAR1]... [COMMAND]

Without any arguments - the same as 'list' command

COMMANDS:"
    echo -e \
"  list\t Show current Tribler torrents with some human readable data
  list-full\t More extended view
 \t Parameter '--no-headline' disables headline. 
 \t ___
  start TORRENT_ID [TORRENT_ID]...\t Start downloading chosen torrent(s) 
  stop,pause TORRENT_ID [ TORRENT_ID]...\t Stop downloading chosen torrent(s)
  recheck TORRENT_ID [TORRENT_ID]...\t Recheck chosen torrent(s)
  add LINK|MAGNETLINK [LINK|MAGNETLINK]...\t Add and start download new torrent(s) provided 
 \t by MAGNETLINK or LINK (or path) to torrent file.
 \t ___
  remove TORRENT_ID [TORRENT_ID]...\t Remove chosen torrent(s) from tribler. 
  remove-data TORRENT_ID [TORRENT_ID]...\t Remove chosen torrent(s) from tribler
 \t  alongside with disk data.
 \t ___
  hops HOPS_NUMBER TORRENT_ID [TORRENT_ID]...\t Change hop number of chosen torrent(s).
  \t HOP_NUMBER can be integer in range 0 - 3.
 \t 0 - no anonymity, 3 - best anonymity.
 \t ___
  show FIELD1[,FIELD2]... TORRENT_ID [TORRENT_ID]...\t Show specific raw data about chosen torrent(s).
 \t In example name, eta, size, infohash in a tabulator separated
 \t table. Multiple fields must be separated by single comma ','
 \t Parameter '--no-headline' disables headline.
 \t ___
  field-names\t Print names of all fields, which can be used 
 \t in 'show' command. There must be at least one
 \t torrent in tribler for this command to run.
 \t ___
  help\t Show this help." | column -s $'\t' -t
echo -e \
"
 TORRENT_ID is an index or infohash or a special keyword 'all', which will match all torrents. 
 Index is a first column of a 'list' command output. Infohash is a hash atributed by tribler 
 to a specific torrent. Can be viewed using command 'list-full' or i.e.:
 \t '$(basename $0) show name,infohash all

PARAMETERS:"
echo -e \
" -h, --help\t Show this help
 -d, --debug\t Enable debug, verbose mode
 -n, --no-headline\t disables headline for 'list' and 'show' commands
 --api-key APIKEY\t Provide Tribler API Key
 --api-port PORT\t Provide Tribler API Port" | column -s $'\t' -t
echo -e "
CONNECTION:
 To connect to Tribler $(basename $0) uses Tribler REST API. For this reason it needs to know
 Tribler API port and API Key. They can be provided via parameters '--api-key' '--api-port'.
 If they are not provided via parameters, $(basename $0) will try to find tribler config 
 file in directory $tribler_dir and read relevant values from it. This config file is in ini format,
 so to read it $(basename $0) will ask and try to download tool bash_ini_parser from github 
 into script directory.

RELEVANT LINKS:
https://github.com/setaur/tribler-bash
https://github.com/Tribler/tribler
https://tribler.readthedocs.io/en/latest/restapi/introduction.html
https://github.com/rudimeier/bash_ini_parser
"
}

while [[ $# -gt 0 ]]; do
    debug "check if '$1' is parameter..."
    case "$1" in
        -h|--help) help; exit ;;
        -d|--debug)
	    DEBUG=1
	    debug 'Debug mode'
	    ;;
        -n|--no-headline)
	    debug 'Disable headlines'
	    unset show_headline ;;
	--api-key)
	    apikey="$2"
	    shift
	    ;;
	--api-port)
	    apiport="$2"
	    shift
	    ;;
#	--dont-start)
#	    dont_start_new_torrent=1
#	    ;;
        --)  shift; break;;
        -*)  help           
             exit 1;;
        *)
	    debug 'no more parameters'
	    break;;
    esac
    shift
done

debug "action=$1"
case "$1" in
    ''|list) list ;;

    list-full) list full ;;
    
    start|stop|pause|recheck)
	action="$1"
	shift
	select_torrent "$@"
	change_download_state "$action"
	;;

    hops)
	hops="$2"
	shift 2
	select_torrent "$@"
	change_download_state hops "$hops"
	;;

    add)
	shift
	add_torrent "$@"
	;;
    
    remove)
	shift
	select_torrent "$@"
	remove_torrent
	;;

    remove-data)
	shift
	select_torrent "$@"
	remove_torrent remove_data
	;;

    help)
	help
	;;

    field-names)
	print_values --list-keys
	;;

    show)
	IFS=',' read -r -a Chosen_fields <<< "$2"
	shift 2
	select_torrent "$@"
	print_values "${Chosen_fields[@]}"
	;;
    *)
	err "Invalid action '$1'"
	help
	exit
	;;
esac
